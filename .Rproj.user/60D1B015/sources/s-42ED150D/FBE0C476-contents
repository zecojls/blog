---
title: Rápida reprojeção de arquivos raster usando R e gdal
author: José Lucas Safanelli
date: '2018-03-01'
slug: rapida-reprojecao-raster-r
categories:
  - r
tags:
  - raster
  - reprojection
  - gdal
  - r
---

### Motivação


Esta postagem disponibiliza uma solução rápida e automatizada para reprojeção de arquivos raster usando o R. Há um tempo atrás, quando pesquisei sobre este assunto, acabei encontrando algumas soluções muito demoradas, o que me levou a pesquisar mais a fundo e desenvolver a solução aqui compartilhada.

A reprojeção é necessária, por exemplo, quando efetuamos o download de imagens de satélite e precisamos colocá-las em um sistema de referência de coordenadas (SRC) padrão de algum projeto, diferente do SRC original das imagens. A solução aqui apresentada é baseada na execução do programa GDAL (*Geospatial Data Abstraction Library*) dentro do R, utilizando a função `gdalwarp`.

A solução mais encontrada pela internet utiliza uma função do pacote `raster`. Utilizando o pacote raster, por exemplo, a reprojeção de uma única banda da imagem de satélite demorou cerca de 2 minutos. Por outro lado, a abordagem via GDAL foi muito mais rápida, demorando cerca de 5 segundos. É uma diferença absurda, principalmente se for executar esse procedimento em projetos contendo milhares de imagens. Para executar o código GDAL, utilizei o pacote `gdalUtils`.

### Solução

Carregue os pacotes necessários listados abaixo. Caso não possuas, utilize a função `install.packages("pacote")` para instalá-los diretamente do CRAN.

```{r warning=FALSE, message=FALSE, eval=FALSE}
library(raster)
library(sp)
library(gdalUtils)
library(rgdal)
```
  
Em seguida, crie uma lista contendo os arquivos raster.

```{r, eval=FALSE}
setwd("D:/diretorio-imagens")
dados <- list.files(getwd(), pattern = "\\.tif")
dados
```

Recupere informações do SRC alvo utilizando a função `make_EPSG` do pacote rgdal.

```{r, eval=FALSE}
EPSG.list <- make_EPSG()
```
  
Irei utilizar, como exemplo, o SRC **SIRGAS 2000 UTM zone 22S** para a reprojeção das imagens de satélite. Dentre as informações que o `make_EPSG` retorna, o código **prj4** é aquele que irá de fato ser utilizado para a reprojeção.
  
```{r, eval=FALSE}
sirgas <- EPSG.list[grep("SIRGAS 2000 / UTM zone 22S", EPSG.list$note),]
```
  
Utilize o pacote **raster** para transformar algum arquivo do objeto **dados** em um objeto raster dentro do R. A função `raster()` é utilizada para tal propósito.
  
```{r, eval=FALSE}
raster.exemplo <- raster(dados[1])
```
  
Com a imagem transformada em raster dentro do R é possível recuperar o seu SRC original, o qual será utilizado para representar o SRC das imagens a serem reprojetadas. É importante lembrar, então, que todas estas imagens possuem o mesmo SRC. Caso contrário, uma outra abordagem que liste cada SRC individual deve ser utilizada.

Os objetos `SRC.velho` e `SRC.novo` possuem, respectivamente, o SRC original e SRC alvo que serão utilizados na reprojeção.
  
```{r, eval=FALSE}
SRC.velho <- projection(raster.exemplo)
SRC.novo <- as.character(sirgas$prj4); SRC.novo
```
  
Para executar a reprojeção de todas as imagens listadas no objeto `dados`, utilize
o loop apresentado abaixo. Os argumentos da função dgalwarp dentro do loop, importado via pacote `gdalUtils` são:

- *srcfile = dados[i]*: representa a iésima imagem a ser reprojetada que está listada no objeto dados;
- *dstfile = paste("EPSG", sirgas$code, dados[i], sep = "_")*: nomea automaticamente o arquivo reprojetado com o código EPSG novo na frente do nome;
- *s_srs = SRC.velho*: código PRJ4 do SRC original;
- *t_srs = SRC.novo*: código PRJ4 do SRC alvo;
- *r = "near"*: reamostragem via vizinho mais próximo;
- *output_Raster = TRUE*: gera o arquivo no diretório de trabalho;
- *overwrite = TRUE*: sobrescreve caso já exista algum arquivo com mesmo nome;
- *verbose = TRUE* -> mostra a execução GDAL no console do R
  
```{r, eval=FALSE}
for(i in 1:length(dados)) {
     gdalwarp(srcfile = dados[i],
              dstfile = paste("EPSG", sirgas$code, dados[i], sep = "_"),
              s_srs = SRC.velho,
              t_srs = SRC.novo,
              r = "near",
              output_Raster = TRUE,
              overwrite = TRUE,
              verbose = TRUE)
}
```